What is this?
-------------

This is the beginning of an editor for metadata.  It is far from
complete yet.

History
-------

Raphaël Quinet is the original author of the editor, but couldn't
finish it. I - Róman Joost - started over as a C beginner hacking on the
editor. In the hope to improve the thing I continued following Raphaëls
initial path.

I want to leave this document as is, since I think Raphaëls thoughts a
still valid. Since his work a lot has changed in terms of parsing and
generating XMP.

That's why I'll be integrating the parsing component with a metadata
library instead of continuing the work of that component.

Current status
--------------
- It does not read metadata, except if there is an XMP block in the
  image file.
- It does not write metadata, it can only export XMP into a separate
  file.
- It does not edit metadata, except for some very limited editing of
  basic scalar types (strings, integers, ...).  It is currently not
  possible to add new properties using the editor (but this can be
  done via the PDB call plug_in_metadata_set_simple()).
- The import/export functions are also supposed to work.  Import merges,
  so it is possible for example to import a license file such as the XMP
  files from Creative Commons in order to apply a license to an image.
- The metadata is saved in a persistent parasite that is overwritten
  after each call.  Caution: the editor should not be open while you
  are trying to test some of the PDB calls, otherwise you would
  discard all changes as soon as you press OK.  This is a problem that
  cannot be solved easily as long as the metadata editor is a plug-in.


Design
------

1. Scenario:
    1. A user opens a file (e.g. a jpeg)
    1. A file plug-in (e.g. jpeg-load) finds an XMP header and calls the
       metadata plug-in through the PDB to decode the XMP.
    1. The metadata plug-in parses the XMP and stores the result in a
       parasite.
    1. The file has finished loading.
    1. The user opens the metadata editor from the menu.
    1. The metadata editor finds the XMP packet stored in the parasite.
    1. The parasite is parsed again and the data read into the XMPModel
    1. The editor has finished loading.
    1. The data is displayed in the editor.


How to find test images?
------------------------

The Exiv2 project provides quite a big amount of test images:

    http://www.exiv2.org/

Work in progress:
-----------------

- libgexiv2 integration

    * Reducing amount of code to maintain
    * Less error prone and sharing of code.

- improve XMP code generation (xmp-encode.c) - currently, some structured
  property types are not written back to the buffer, so the round-trip
  decode/encode can silently discard some properties
- add tabs for easy editing of metadata, connect them to the tree
- fix the conversion to/from EXIF (exif-decode.c)
- register PDB functions correctly (for setting/getting metadata)

Near future:
- smarter display of rational values, closed sets, ...
- improve the layout of the various tabs


-------------------------------------------------------------------------------
Files modified (2004-08-24):
  configure.in                    (added /plug-ins/metadata/Makefile)
  menus/image-menu.xml.in         (added placeholder "<Image>/File/Info")
  plug-ins/Makefile.am            (added "metadata" in SUBDIRS)
  plug-ins/common/jpeg.c          (changed to get/set metadata through PDB)

New files:
  plug-ins/metadata/Makefile.am   (generates Makefile.in to get a Makefile)
  plug-ins/metadata/exif-decode.c (converts EXIF into the XMP tree model)
  plug-ins/metadata/exif-decode.h
  plug-ins/metadata/interface.c   (user interface: widgets and callbacks)
  plug-ins/metadata/interface.h
  plug-ins/metadata/metadata.c    (main part: registers the plug-in, etc.)
  plug-ins/metadata/xmp-encode.c  (generates XMP metadata from the tree model)
  plug-ins/metadata/xmp-encode.h
  plug-ins/metadata/xmp-model.c   (model for the treeview, list of XMP schemas)
  plug-ins/metadata/xmp-model.h
  plug-ins/metadata/xmp-parse.c   (simple parser for XMP metadata)
  plug-ins/metadata/xmp-parse.h
  plug-ins/metadata/xmp-schemas.c (holds schema definitions for XMP metadata)
  plug-ins/metadata/xmp-schemas.h

UI:
  plug-ins/metadata/gimpxmpmodelentry.c     (Entry widget to string values.)
  plug-ins/metadata/gimpxmpmodelentry.h
  plug-ins/metadata/gimpxmpmodeltext.c      (Entry widget for text values)
  plug-ins/metadata/gimpxmpmodeltext.h
  plug-ins/metadata/gimpxmpmodelwidget.c    (Interface Widget which is subscribed to change events.)
  plug-ins/metadata/gimpxmpmodelwidget.h
